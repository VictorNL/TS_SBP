package eo;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

import utils.CustomEntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 19 19:22:50 COT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SbpSlsContactColImpl extends CustomEntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdNomCol {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getIdNomCol();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setIdNomCol((Number)value);
            }
        }
        ,
        NomColumn {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getNomColumn();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setNomColumn((String)value);
            }
        }
        ,
        Estado {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getEstado();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setEstado((String)value);
            }
        }
        ,
        NroOrden {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getNroOrden();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setNroOrden((Number)value);
            }
        }
        ,
        NomOrCol {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getNomOrCol();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setNomOrCol((String)value);
            }
        }
        ,
        NomTab {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getNomTab();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setNomTab((String)value);
            }
        }
        ,
        CodCol {
            public Object get(SbpSlsContactColImpl obj) {
                return obj.getCodCol();
            }

            public void put(SbpSlsContactColImpl obj, Object value) {
                obj.setCodCol((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(SbpSlsContactColImpl object);

        public abstract void put(SbpSlsContactColImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDNOMCOL = AttributesEnum.IdNomCol.index();
    public static final int NOMCOLUMN = AttributesEnum.NomColumn.index();
    public static final int ESTADO = AttributesEnum.Estado.index();
    public static final int NROORDEN = AttributesEnum.NroOrden.index();
    public static final int NOMORCOL = AttributesEnum.NomOrCol.index();
    public static final int NOMTAB = AttributesEnum.NomTab.index();
    public static final int CODCOL = AttributesEnum.CodCol.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SbpSlsContactColImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("eo.SbpSlsContactCol");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for IdNomCol, using the alias name IdNomCol.
     * @return the IdNomCol
     */
    public Number getIdNomCol() {
        return (Number)getAttributeInternal(IDNOMCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdNomCol.
     * @param value value to set the IdNomCol
     */
    public void setIdNomCol(Number value) {
        setAttributeInternal(IDNOMCOL, value);
    }

    /**
     * Gets the attribute value for NomColumn, using the alias name NomColumn.
     * @return the NomColumn
     */
    public String getNomColumn() {
        return (String)getAttributeInternal(NOMCOLUMN);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomColumn.
     * @param value value to set the NomColumn
     */
    public void setNomColumn(String value) {
        setAttributeInternal(NOMCOLUMN, value);
    }

    /**
     * Gets the attribute value for Estado, using the alias name Estado.
     * @return the Estado
     */
    public String getEstado() {
        return (String)getAttributeInternal(ESTADO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Estado.
     * @param value value to set the Estado
     */
    public void setEstado(String value) {
        setAttributeInternal(ESTADO, value);
    }

    /**
     * Gets the attribute value for NroOrden, using the alias name NroOrden.
     * @return the NroOrden
     */
    public Number getNroOrden() {
        return (Number)getAttributeInternal(NROORDEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for NroOrden.
     * @param value value to set the NroOrden
     */
    public void setNroOrden(Number value) {
        setAttributeInternal(NROORDEN, value);
    }


    /**
     * Gets the attribute value for NomOrCol, using the alias name NomOrCol.
     * @return the NomOrCol
     */
    public String getNomOrCol() {
        return (String)getAttributeInternal(NOMORCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomOrCol.
     * @param value value to set the NomOrCol
     */
    public void setNomOrCol(String value) {
        setAttributeInternal(NOMORCOL, value);
    }

    /**
     * Gets the attribute value for NomTab, using the alias name NomTab.
     * @return the NomTab
     */
    public String getNomTab() {
        return (String)getAttributeInternal(NOMTAB);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomTab.
     * @param value value to set the NomTab
     */
    public void setNomTab(String value) {
        setAttributeInternal(NOMTAB, value);
    }

    /**
     * Gets the attribute value for CodCol, using the alias name CodCol.
     * @return the CodCol
     */
    public String getCodCol() {
        return (String)getAttributeInternal(CODCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodCol.
     * @param value value to set the CodCol
     */
    public void setCodCol(String value) {
        setAttributeInternal(CODCOL, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param idNomCol key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number idNomCol) {
        return new Key(new Object[]{idNomCol});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
