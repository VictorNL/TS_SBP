package eo;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

import utils.CustomEntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 07 22:20:59 COT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SbpSlsTarjetasImpl extends CustomEntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdTbl {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getIdTbl();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setIdTbl((Number)value);
            }
        }
        ,
        CodDist {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getCodDist();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setCodDist((String)value);
            }
        }
        ,
        CodProv {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getCodProv();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setCodProv((String)value);
            }
        }
        ,
        CodDept {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getCodDept();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setCodDept((String)value);
            }
        }
        ,
        CodTarjeta {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getCodTarjeta();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setCodTarjeta((String)value);
            }
        }
        ,
        DescTarj {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getDescTarj();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setDescTarj((String)value);
            }
        }
        ,
        NomDept {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getNomDept();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setNomDept((String)value);
            }
        }
        ,
        NomDist {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getNomDist();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setNomDist((String)value);
            }
        }
        ,
        NomProv {
            public Object get(SbpSlsTarjetasImpl obj) {
                return obj.getNomProv();
            }

            public void put(SbpSlsTarjetasImpl obj, Object value) {
                obj.setNomProv((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(SbpSlsTarjetasImpl object);

        public abstract void put(SbpSlsTarjetasImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDTBL = AttributesEnum.IdTbl.index();
    public static final int CODDIST = AttributesEnum.CodDist.index();
    public static final int CODPROV = AttributesEnum.CodProv.index();
    public static final int CODDEPT = AttributesEnum.CodDept.index();
    public static final int CODTARJETA = AttributesEnum.CodTarjeta.index();
    public static final int DESCTARJ = AttributesEnum.DescTarj.index();
    public static final int NOMDEPT = AttributesEnum.NomDept.index();
    public static final int NOMDIST = AttributesEnum.NomDist.index();
    public static final int NOMPROV = AttributesEnum.NomProv.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SbpSlsTarjetasImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("eo.SbpSlsTarjetas");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for IdTbl, using the alias name IdTbl.
     * @return the IdTbl
     */
    public Number getIdTbl() {
        return (Number)getAttributeInternal(IDTBL);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdTbl.
     * @param value value to set the IdTbl
     */
    public void setIdTbl(Number value) {
        setAttributeInternal(IDTBL, value);
    }

    /**
     * Gets the attribute value for CodDist, using the alias name CodDist.
     * @return the CodDist
     */
    public String getCodDist() {
        return (String)getAttributeInternal(CODDIST);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodDist.
     * @param value value to set the CodDist
     */
    public void setCodDist(String value) {
        setAttributeInternal(CODDIST, value);
    }

    /**
     * Gets the attribute value for CodProv, using the alias name CodProv.
     * @return the CodProv
     */
    public String getCodProv() {
        return (String)getAttributeInternal(CODPROV);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodProv.
     * @param value value to set the CodProv
     */
    public void setCodProv(String value) {
        setAttributeInternal(CODPROV, value);
    }

    /**
     * Gets the attribute value for CodDept, using the alias name CodDept.
     * @return the CodDept
     */
    public String getCodDept() {
        return (String)getAttributeInternal(CODDEPT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodDept.
     * @param value value to set the CodDept
     */
    public void setCodDept(String value) {
        setAttributeInternal(CODDEPT, value);
    }

    /**
     * Gets the attribute value for CodTarjeta, using the alias name CodTarjeta.
     * @return the CodTarjeta
     */
    public String getCodTarjeta() {
        return (String)getAttributeInternal(CODTARJETA);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodTarjeta.
     * @param value value to set the CodTarjeta
     */
    public void setCodTarjeta(String value) {
        setAttributeInternal(CODTARJETA, value);
    }

    /**
     * Gets the attribute value for DescTarj, using the alias name DescTarj.
     * @return the DescTarj
     */
    public String getDescTarj() {
        return (String)getAttributeInternal(DESCTARJ);
    }

    /**
     * Sets <code>value</code> as the attribute value for DescTarj.
     * @param value value to set the DescTarj
     */
    public void setDescTarj(String value) {
        setAttributeInternal(DESCTARJ, value);
    }

    /**
     * Gets the attribute value for NomDept, using the alias name NomDept.
     * @return the NomDept
     */
    public String getNomDept() {
        return (String)getAttributeInternal(NOMDEPT);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomDept.
     * @param value value to set the NomDept
     */
    public void setNomDept(String value) {
        setAttributeInternal(NOMDEPT, value);
    }

    /**
     * Gets the attribute value for NomDist, using the alias name NomDist.
     * @return the NomDist
     */
    public String getNomDist() {
        return (String)getAttributeInternal(NOMDIST);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomDist.
     * @param value value to set the NomDist
     */
    public void setNomDist(String value) {
        setAttributeInternal(NOMDIST, value);
    }

    /**
     * Gets the attribute value for NomProv, using the alias name NomProv.
     * @return the NomProv
     */
    public String getNomProv() {
        return (String)getAttributeInternal(NOMPROV);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomProv.
     * @param value value to set the NomProv
     */
    public void setNomProv(String value) {
        setAttributeInternal(NOMPROV, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param idTbl key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number idTbl) {
        return new Key(new Object[]{idTbl});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
