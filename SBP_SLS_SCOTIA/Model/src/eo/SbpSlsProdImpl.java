package eo;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

import utils.CustomEntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 19 10:13:03 COT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SbpSlsProdImpl extends CustomEntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdProd {
            public Object get(SbpSlsProdImpl obj) {
                return obj.getIdProd();
            }

            public void put(SbpSlsProdImpl obj, Object value) {
                obj.setIdProd((Number)value);
            }
        }
        ,
        NomProd {
            public Object get(SbpSlsProdImpl obj) {
                return obj.getNomProd();
            }

            public void put(SbpSlsProdImpl obj, Object value) {
                obj.setNomProd((String)value);
            }
        }
        ,
        IdSecProd {
            public Object get(SbpSlsProdImpl obj) {
                return obj.getIdSecProd();
            }

            public void put(SbpSlsProdImpl obj, Object value) {
                obj.setIdSecProd((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(SbpSlsProdImpl object);

        public abstract void put(SbpSlsProdImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDPROD = AttributesEnum.IdProd.index();
    public static final int NOMPROD = AttributesEnum.NomProd.index();
    public static final int IDSECPROD = AttributesEnum.IdSecProd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SbpSlsProdImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("eo.SbpSlsProd");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for IdProd, using the alias name IdProd.
     * @return the IdProd
     */
    public Number getIdProd() {
        return (Number)getAttributeInternal(IDPROD);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdProd.
     * @param value value to set the IdProd
     */
    public void setIdProd(Number value) {
        setAttributeInternal(IDPROD, value);
    }

    /**
     * Gets the attribute value for NomProd, using the alias name NomProd.
     * @return the NomProd
     */
    public String getNomProd() {
        return (String)getAttributeInternal(NOMPROD);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomProd.
     * @param value value to set the NomProd
     */
    public void setNomProd(String value) {
        setAttributeInternal(NOMPROD, value);
    }

    /**
     * Gets the attribute value for IdSecProd, using the alias name IdSecProd.
     * @return the IdSecProd
     */
    public Number getIdSecProd() {
        return (Number)getAttributeInternal(IDSECPROD);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdSecProd.
     * @param value value to set the IdSecProd
     */
    public void setIdSecProd(Number value) {
        setAttributeInternal(IDSECPROD, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param idSecProd key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number idSecProd) {
        return new Key(new Object[]{idSecProd});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
